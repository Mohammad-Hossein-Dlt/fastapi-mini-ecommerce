name: CI/CD with Kind

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # FastAPI Ports
      EXTERNAL_FASTAPI_PORT: ${{ env.EXTERNAL_FASTAPI_PORT }}
      INTERNAL_FASTAPI_PORT: ${{ env.INTERNAL_FASTAPI_PORT }}

      # Base URLs
      AUTH_BASE_URL: ${{ env.AUTH_BASE_URL }}
      PRODUCT_BASE_URL: ${{ env.PRODUCT_BASE_URL }}
      ORDER_BASE_URL: ${{ env.ORDER_BASE_URL }}

      # DB Stack
      AUTH_DB_STACK: ${{ env.AUTH_DB_STACK }}
      PRODUCT_DB_STACK: ${{ env.PRODUCT_DB_STACK }}
      ORDER_DB_STACK: ${{ env.ORDER_DB_STACK }}

      # MongoDB
      MONGO_HOST: ${{ env.MONGO_HOST }}
      MONGO_PORT: ${{ env.MONGO_PORT }}
      MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGO_INITDB_ROOT_PASSWORD }}
      MONGO_INITDB_DATABASE: ${{ env.MONGO_INITDB_DATABASE }}

      # PostgreSQL
      POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
      POSTGRES_USER: ${{ env.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ env.POSTGRES_DB }}

      # PGAdmin
      PGADMIN_DEFAULT_EMAIL: ${{ env.PGADMIN_DEFAULT_EMAIL }}
      PGADMIN_DEFAULT_PASSWORD: ${{ env.PGADMIN_DEFAULT_PASSWORD }}

      # JWT
      JWT_SECRET: ${{ env.JWT_SECRET }}
      JWT_ALGORITHM: ${{ env.JWT_ALGORITHM }}
      JWT_EXPIRATION_MINUTES: ${{ env.JWT_EXPIRATION_MINUTES }}
      JWT_REFRESH_EXPIRATION_MINUTES: ${{ env.JWT_REFRESH_EXPIRATION_MINUTES }}

    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v3

      # 2. Setup Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Install Kind
      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.25.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # 4. Create Kind cluster
      - name: Create Kind cluster
        run: |
          kind create cluster --name ci-cd-cluster

      # 5. Verify cluster
      - name: Check cluster nodes
        run: kubectl get nodes

      # 6. Build and load Docker images for FastAPI services
      - name: Build and load auth_service
        run: |
          docker build -t auth:latest ./auth_service
          kind load docker-image auth:latest --name ci-cd-cluster

      - name: Build and load product_service
        run: |
          docker build -t product:latest ./product_service
          kind load docker-image product:latest --name ci-cd-cluster

      - name: Build and load order_service
        run: |
          docker build -t order:latest ./order_service
          kind load docker-image order:latest --name ci-cd-cluster

      - name: Build and load admin_service
        run: |
          docker build -t admin:latest ./admin_service
          kind load docker-image admin:latest --name ci-cd-cluster

      - name: Build and load user_service
        run: |
          docker build -t user:latest ./user_service
          kind load docker-image user:latest --name ci-cd-cluster

      - name: Apply nginx ConfigMap from file
        run: |
          kubectl create configmap nginx-config --from-file=nginx.conf -o yaml --dry-run=client | kubectl apply -f -

      # 7. Deploy Kubernetes manifests
      - name: Deploy to Kind cluster
        run: |
          kubectl apply -f k8s/

      # - name: Restart Nginx
      #   run: |
      #     kubectl rollout restart deployment nginx-service

      # 8. Verify Pods
      - name: Check Pods status
        run: kubectl get pods -A

      # 9. Optional: Run tests against services
      - name: Test Services
        run: |
          kubectl get svc

      - name: Port-forward Nginx
        run: |
          kubectl port-forward svc/nginx-service 8080:80

      - name: Send request to auth-service
        run: |
          check_service=$(curl -s http://localhost:8080/auth/api/v1/user/self/get)
          echo "$check_service"
