name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      # FastAPI Ports
      EXTERNAL_FASTAPI_PORT: ${{ vars.EXTERNAL_FASTAPI_PORT }}
      INTERNAL_FASTAPI_PORT: ${{ vars.INTERNAL_FASTAPI_PORT }}

      # Base URLs
      AUTH_BASE_URL: ${{ vars.AUTH_BASE_URL }}
      PRODUCT_BASE_URL: ${{ vars.PRODUCT_BASE_URL }}
      ORDER_BASE_URL: ${{ vars.ORDER_BASE_URL }}

      # DB Stack
      AUTH_DB_STACK: ${{ vars.AUTH_DB_STACK }}
      PRODUCT_DB_STACK: ${{ vars.PRODUCT_DB_STACK }}
      ORDER_DB_STACK: ${{ vars.ORDER_DB_STACK }}

      # MongoDB
      MONGO_HOST: ${{ vars.MONGO_HOST }}
      MONGO_PORT: ${{ vars.MONGO_PORT }}
      MONGO_INITDB_ROOT_USERNAME: ${{ vars.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ vars.MONGO_INITDB_ROOT_PASSWORD }}
      MONGO_INITDB_DATABASE: ${{ vars.MONGO_INITDB_DATABASE }}

      # PostgreSQL
      POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}

      # PGAdmin
      PGADMIN_DEFAULT_EMAIL: ${{ vars.PGADMIN_DEFAULT_EMAIL }}
      PGADMIN_DEFAULT_PASSWORD: ${{ vars.PGADMIN_DEFAULT_PASSWORD }}

      # JWT
      JWT_SECRET: ${{ vars.JWT_SECRET }}
      JWT_ALGORITHM: ${{ vars.JWT_ALGORITHM }}
      JWT_EXPIRATION_MINUTES: ${{ vars.JWT_EXPIRATION_MINUTES }}
      JWT_REFRESH_EXPIRATION_MINUTES: ${{ vars.JWT_REFRESH_EXPIRATION_MINUTES }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push auth
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/auth:latest ./auth_service
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/auth:latest

      - name: Build and Push product
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/product:latest ./product_service
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product:latest

      - name: Build and Push order
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/order:latest ./order_service
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/order:latest

      - name: Build and Push admin
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/admin:latest ./admin_service
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/admin:latest

      - name: Build and Push user
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/user:latest ./user_service
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/user:latest

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      # - name: Configure kubeconfig
      #   run: |
      #     mkdir -p $HOME/.kube
      #     echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

      - name: Configure Kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      # - name: Apply ConfigMap from .env
      #   run: |
      #     kubectl create configmap app-config --from-env-file=.env -o yaml --dry-run=client | kubectl apply -f -

      - name: Create .env file
        run: |
          cat <<EOF > .env
          EXTERNAL_FASTAPI_PORT = ${{ vars.EXTERNAL_FASTAPI_PORT }}
          INTERNAL_FASTAPI_PORT = ${{ vars.INTERNAL_FASTAPI_PORT }}

          # Base URLs
          AUTH_BASE_URL = ${{ vars.AUTH_BASE_URL }}
          PRODUCT_BASE_URL = ${{ vars.PRODUCT_BASE_URL }}
          ORDER_BASE_URL = ${{ vars.ORDER_BASE_URL }}

          # DB Stack
          AUTH_DB_STACK = ${{ vars.AUTH_DB_STACK }}
          PRODUCT_DB_STACK = ${{ vars.PRODUCT_DB_STACK }}
          ORDER_DB_STACK = ${{ vars.ORDER_DB_STACK }}

          # MongoDB
          MONGO_HOST = ${{ vars.MONGO_HOST }}
          MONGO_PORT = ${{ vars.MONGO_PORT }}
          MONGO_INITDB_ROOT_USERNAME = ${{ vars.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD = ${{ vars.MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE = ${{ vars.MONGO_INITDB_DATABASE }}

          # PostgreSQL
          POSTGRES_HOST = ${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT = ${{ vars.POSTGRES_PORT }}
          POSTGRES_USER = ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD = ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_DB = ${{ vars.POSTGRES_DB }}

          # JWT
          JWT_SECRET = ${{ vars.JWT_SECRET }}
          JWT_ALGORITHM = ${{ vars.JWT_ALGORITHM }}
          JWT_EXPIRATION_MINUTES = ${{ vars.JWT_EXPIRATION_MINUTES }}
          JWT_REFRESH_EXPIRATION_MINUTES = ${{ vars.JWT_REFRESH_EXPIRATION_MINUTES }}
          EOF

      - name: Apply app-config ConfigMap from file
        run: |
          kubectl create configmap app-config --from-file=.env -o yaml --dry-run=client | kubectl apply -f -

      - name: Apply nginx ConfigMap from file
        run: |
          kubectl create configmap nginx-config --from-file=nginx.conf -o yaml --dry-run=client | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/

      - name: Restart nginx to pick up new config
        run: |
          kubectl rollout restart deployment nginx-service
